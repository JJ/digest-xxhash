use v6;
use NativeCall;
unit module Digest::xxHash;

sub find_xxhash_library()
{
    my @xxhash_probable_locations =
        @*INC».subst(/^file'#'/, '') »~»
            ("/Digest/blib/" ~ "@xxhash_library_name@");

    my $xxhash_library = @xxhash_probable_locations.grep({.IO.f})[0];

    unless $xxhash_library
    {
        note "\n*** Could not find xxHash shared library, "
            ~ "locations considered (derived from @*INC): \n"
            ~ @xxhash_probable_locations;
        exit 1;
    }

    $xxhash_library;
}

constant xxhash_library = find_xxhash_library();

sub XXH32(CArray[uint8], int32, Int) returns Int is native(xxhash_library) {*}
sub xxhash_revision() returns Int is native(xxhash_library) is export {*}
sub xxhash_src_uri() returns Str is native(xxhash_library) is export {*}

multi sub xxHash(Str $string, Int :$seed = 0) is export
{
    my Int @data = $string.split('')».encode».contents.flat».Int;
    build_xxhash(@data, $seed);
}

multi sub xxHash(Str :$file!, Int :$seed = 0) is export
{
    xxHash(slurp($file), :$seed);
}

multi sub xxHash(Buf[uint8] :$buf-u8!, Int :$seed = 0) is export
{
    my Int @data = $buf-u8.list;
    build_xxhash(@data, $seed);
}

sub build_xxhash(Int @data, $seed = 0)
{
    die_if_not_uint32($seed);

    my @input := CArray[uint8].new;

    my Int $len = 0;
    for @data
    {
        @input[$len++] = $_;
    }

    XXH32(@input, $len, $seed);
}

sub die_if_not_uint32($probably_uint32)
{
    if $*TYPE-CHECK
    {
        die "Not in range of uint32_t: $probably_uint32!"
            if $probably_uint32 !~~ ^2**32;
    }
}

# vim: ft=perl6
