use v6;

module Digest::xxHash;

use NativeCall;

sub find-xxhash-library() {
        my @xxhash-probable-locations = @*INC »~» (
                "/Digest/blib/" ~ "@xxhash_library_name@"
        );
        my $xxhash-library = shift @(
                grep({.IO.f}, @xxhash-probable-locations),
        );
        unless $xxhash-library {
                note "\n*** Could not find xxHash shared library, "
                        ~ "locations considered (derived from @*INC): \n"
                        ~ @xxhash-probable-locations;
                exit 1;
        }

        return $xxhash-library;
}

constant xxhash-library = find-xxhash-library;

sub XXH32(CArray[uint8], int32, Int) returns Int is native(xxhash-library)           { * }
sub xxhash_revision()                returns Int is native(xxhash-library) is export { * }
sub xxhash_src_uri()                 returns Str is native(xxhash-library) is export { * }

multi sub xxHash(Str $string, Int :$seed = 0) is export {
	my Int @data = $string.split(Nil)».encode».contents».Int;
	return build-xxhash(@data, $seed);
}

multi sub xxHash(Str :$file!, Int :$seed = 0) is export {
	my $fh = $file.IO.open;
	return xxHash($fh.slurp, :$seed);
}

multi sub xxHash(Buf[uint8] :$buf-u8!, Int :$seed = 0) is export {
	my Int @data = $buf-u8.list;
	return build-xxhash(@data, $seed);
}

sub build-xxhash(Int @data, $seed = 0) {
	die-if-not-uint32($seed);

	my @input := CArray[uint8].new();

	my Int $len = 0;
	for @data {
		@input[$len++] = $_;
	}

	return XXH32(@input, $len, $seed);
}

sub die-if-not-uint32($probably-uint32) {
	if $*TYPE-CHECK {
		die "Not in range of uint32_t: {$probably-uint32}!"
			if $probably-uint32 !~~ ^2**32;
	}
}

# vi: ft=perl6
